{"version":3,"sources":["components/ItemTable/ItemTable.js","constants.js","service/ItemService.js","Store.js","components/ItemTable/TableTools.js","layout/Header.js","layout/Footer.js","layout/Home.js","App.js","serviceWorker.js","index.js"],"names":["ItemTable","items","rowClassName","index","rowGetter","width","height","className","headerHeight","rowHeight","rowCount","length","label","dataKey","flexGrow","ITEM_API_URL","ItemService","page","axios","get","Constants","res","id","query","Store","createContext","initialState","loading","search","reducer","state","action","type","payload","itemService","TableTools","useContext","dispatch","handleSearch","a","findItemByText","data","value","onChange","target","onClick","Header","Footer","disabled","Home","children","App","useEffect","getItems","fetchItems","console","log","Boolean","window","location","hostname","match","ReactDOM","render","props","useReducer","Provider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.df566456.chunk.js","sourcesContent":["import React from 'react';\nimport AutoSizer from 'react-virtualized/dist/commonjs/AutoSizer';\nimport Table, { Column } from 'react-virtualized/dist/commonjs/Table';\nimport 'react-virtualized/styles.css';\n\nconst ItemTable = ({ items }) => {\n  const rowClassName = ({ index }) => {\n    if (index < 0) {\n      return 'TableRow--header';\n    } else {\n      return index % 2 === 0 ? 'TableRow--even' : 'TableRow--odd';\n    }\n  };\n\n  const rowGetter = ({ index }) => items[index];\n\n  return (\n    <AutoSizer>\n      {({ width, height }) => (\n        <Table\n          className=\"ItemTable\"\n          width={width}\n          height={height}\n          headerHeight={50}\n          rowClassName={rowClassName}\n          rowHeight={50}\n          rowCount={items.length}\n          rowGetter={rowGetter}\n        >\n          <Column label=\"Brand\" dataKey=\"brand_name\" width={100} flexGrow={1} />\n          <Column label=\"Name\" dataKey=\"name\" width={100} flexGrow={2} />\n          <Column label=\"Size\" dataKey=\"size\" width={100} flexGrow={1} />\n        </Table>\n      )}\n    </AutoSizer>\n  );\n};\n\nexport default ItemTable;\n","export const ITEM_API_URL = 'https://www.datakick.org/api/items';\n","import axios from 'axios';\nimport * as Constants from '../constants';\n\nexport class ItemService {\n  async getItems(page = 1) {\n    const res = await axios.get(`${Constants.ITEM_API_URL}?page=${page}`);\n    return res;\n  }\n\n  async findItemByID(id) {\n    const res = await axios.get(`${Constants.ITEM_API_URL}/${id}`);\n    return res;\n  }\n\n  async findItemByText(query) {\n    const res = await axios.get(`${Constants.ITEM_API_URL}?query=${query}`);\n    return res;\n  }\n}\n","import React, { createContext, useReducer } from 'react';\n\nexport const Store = createContext();\n\nconst initialState = {\n  items: [],\n  loading: false,\n  page: 1,\n  search: '',\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'SET_ITEMS':\n      return { ...state, items: action.payload };\n    case 'SET_LOADING':\n      return { ...state, loading: action.payload };\n    case 'SET_PAGE':\n      return { ...state, page: action.payload };\n    case 'SET_SEARCH':\n      return { ...state, search: action.payload };\n    default:\n      return state;\n  }\n}\n\nexport function StoreProvider(props) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const value = { state, dispatch };\n  return <Store.Provider value={value}>{props.children}</Store.Provider>;\n}\n","import React, { useContext } from 'react';\nimport { ItemService } from '../../service/ItemService';\nimport { Store } from '../../Store';\n\nconst itemService = new ItemService();\n\nconst TableTools = () => {\n  const { state, dispatch } = useContext(Store);\n  const { search } = state;\n\n  const handleOnChange = ({ target }) => {\n    return dispatch({\n      type: 'SET_SEARCH',\n      payload: target.value,\n    });\n  };\n\n  const handleSearch = async () => {\n    if (search !== '') {\n      const res = await itemService.findItemByText(search);\n      return dispatch({\n        type: 'SET_ITEMS',\n        payload: res.data,\n      });\n    } else {\n      return dispatch({\n        type: 'SET_PAGE',\n        payload: 1,\n      });\n    }\n  };\n\n  return (\n    <div className=\"TableTools\">\n      <input value={search} onChange={handleOnChange} />\n      <button onClick={handleSearch}>Search</button>\n    </div>\n  );\n};\n\nexport default TableTools;\n","import React, { Fragment } from 'react';\nimport { TableTools } from '../components';\n\nconst Header = () => {\n  return (\n    <Fragment>\n      <header className=\"Header\">\n        <h1>shopmate</h1>\n      </header>\n      <TableTools />\n    </Fragment>\n  );\n};\n\nexport default Header;\n","import React, { useContext } from 'react';\nimport { ItemService } from '../service/ItemService';\nimport { Store } from '../Store';\n\nconst Footer = () => {\n  const { state, dispatch } = useContext(Store);\n  const { page } = state;\n\n  const nextPage = () => {\n    return dispatch({\n      type: 'SET_PAGE',\n      payload: state.page + 1,\n    });\n  };\n\n  const prevPage = () => {\n    return dispatch({\n      type: 'SET_PAGE',\n      payload: state.page - 1,\n    });\n  };\n\n  return (\n    <footer className=\"Footer\">\n      <div>\n        <button\n          className=\"Footer__Button\"\n          disabled={page === 1}\n          onClick={prevPage}\n        >\n          previous\n        </button>\n        {page}\n        <button className=\"Footer__Button\" onClick={nextPage}>\n          next\n        </button>\n      </div>\n    </footer>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport Header from './Header';\nimport Footer from './Footer';\n\nconst Home = ({ children }) => {\n  return (\n    <div className=\"Home\">\n      <Header />\n      <div className=\"Table\">{children}</div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default Home;\n","import React, { useEffect, useContext } from 'react';\nimport { ItemTable } from './components';\nimport { ItemService } from './service/ItemService';\nimport { Home } from './layout';\nimport { Store } from './Store';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.scss';\n\nconst itemService = new ItemService();\n\nfunction App() {\n  const { state, dispatch } = useContext(Store);\n  const { items, page } = state;\n\n  useEffect(() => {\n    const fetchItems = async page => {\n      const data = await itemService.getItems(page);\n      return dispatch({\n        type: 'SET_ITEMS',\n        payload: data.data,\n      });\n    };\n\n    fetchItems(page);\n  }, [dispatch, page]);\n\n  console.log('App rendered');\n  return (\n    <div className=\"App\">\n      <Home>\n        <ItemTable items={items} />\n      </Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { StoreProvider } from './Store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StoreProvider>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}